{"version":3,"sources":["redux/slices/filterSlice.js","redux/operations.js","redux/store.js","components/Container/Container.styled.jsx","components/Form/Form.styled.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/Input/Input.styled.jsx","components/Input/Input.jsx","components/Spinner/Spinner.js","components/Form/Form.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["filterSlice","createSlice","name","initialState","reducers","filter","state","action","payload","actions","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","postContact","mutation","newContact","url","method","body","invalidatesTags","deleteContact","contactId","useFetchContactsQuery","usePostContactMutation","useDeleteContactMutation","rootReducer","reducer","store","configureStore","middleware","getDefaultMiddleware","devTools","process","Container","styled","div","Title","h1","SectionTitle","h2","CustomForm","form","CustomButton","button","Button","text","type","onClick","CurrentInput","input","CurrentLabel","label","Input","value","pattern","title","onChange","spin","keyframes","Spinner","CgSpinner","Form","useState","setName","number","setNumber","addContact","isLoading","contacts","data","handleSetInfo","e","target","reset","onSubmit","preventDefault","id","uuidv4","find","savedContact","alert","toast","success","required","disabled","size","defaultProps","ContactItem","li","ContactListItem","isDeliting","ContactList","filterValue","useSelector","useEffect","localStorage","setItem","JSON","stringify","filteredContacts","contact","toLowerCase","includes","map","Filter","dispatch","useDispatch","App","error","isFetching","length","position","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60143901.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst filterSlice=createSlice({\r\n  name: 'filter',\r\n  initialState: '',\r\n  reducers: {\r\n      filter: (state, action)=> action.payload,\r\n  },\r\n});\r\n\r\nexport const {filter} = filterSlice.actions;\r\nexport default filterSlice.reducer;","// import { createApi } from '@reduxjs/toolkit/query';\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nconst contactsApi = createApi({\r\n    reducerPath: 'contactsApi',\r\n    baseQuery: fetchBaseQuery({\r\n        baseUrl: 'https://612a2381068adf001789ba5f.mockapi.io/api/v1/'\r\n    }),\r\n    tagTypes:['Contacts'],\r\n    endpoints: (builder) => ({\r\n        fetchContacts: builder.query({\r\n            query: () => `/contacts`,\r\n            providesTags: ['Contacts'],\r\n        }),\r\n        postContact: builder.mutation({\r\n            query: (newContact) => ({\r\n                url: '/contacts',\r\n                method: 'POST',\r\n                body: newContact,\r\n            }),\r\n            invalidatesTags:['Contacts'],\r\n        }),\r\n        deleteContact:builder.mutation({\r\n            query: (contactId) => ({\r\n                url: `/contacts/${contactId}`,\r\n                method: 'DELETE',\r\n            }),\r\n            invalidatesTags:['Contacts'],\r\n        }),\r\n    }),\r\n});\r\n\r\n\r\nexport default contactsApi;\r\n \r\nexport const {\r\n    useFetchContactsQuery,\r\n    usePostContactMutation,\r\n    useDeleteContactMutation,\r\n} = contactsApi;\r\n\r\n","//Без Redux-toolkit\r\n// import { createStore} from 'redux';\r\n// import { rootReduser } from './reducers/index'\r\n// import { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\n// const store = createStore(rootReduser, devToolsEnhancer());\r\n\r\n// export default store;\r\n\r\n\r\n// c Redux-toolkit\r\n// import {configureStore } from '@reduxjs/toolkit';\r\n// import { rootReduser } from './reducers/index';\r\n\r\n// const store = configureStore({\r\n//     reducer: rootReducer,\r\n//     devTools: process.env.NODE_ENV!== 'prodaction',\r\n// });\r\n\r\n// export default store;\r\n\r\n\r\n// c Redux-toolkit i Slice\r\nimport {configureStore } from '@reduxjs/toolkit';\r\n// import items from './slices/itemsSlice';\r\nimport filter from './slices/filterSlice';\r\nimport contactsApi from './operations';\r\n\r\nconst rootReducer = {\r\n    filter,\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        [...getDefaultMiddleware(), contactsApi.middleware],\r\n    devTools: process.env.NODE_ENV!== 'prodaction',\r\n});\r\n\r\nexport default store;\r\n\r\n\r\n \r\n\r\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 400px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n  padding: 30px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 30px;\n`;\n\nexport const Title = styled.h1`\n  display: block;\n  font-size: 26px;\n  font-weight: 800;\n  text-align: center;\n  text-transform: uppercase;\n  margin-bottom: 10px;\n`;\n\nexport const SectionTitle = styled.h2`\n  display: block;\n  font-size: 20px;\n  font-weight: 800;\n  text-align: center;\n  text-transform: uppercase;\n  margin-top: 30px;\n  margin-bottom: 10px;\n`;\n","import styled from '@emotion/styled';\n\nexport const CustomForm = styled.form`\n  padding: 0px;\n`;\n","import styled from '@emotion/styled';\n\nexport const CustomButton = styled.button`\n  background-color: #ff6b0a;\n  border: none;\n  border-radius: 5px;\n  outline: none;\n  padding: 3px 12px;\n  color: #fff;\n  font-weight: bold;\n  font-size: 12px;\n  line-height: 16px;\n  text-transform: uppercase;\n  cursor: pointer;\n`;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { CustomButton } from './Button.styled';\n\nfunction Button({ text, type, onClick }) {\n  return (\n    <CustomButton type={type} onClick={onClick}>\n      {text}\n    </CustomButton>\n  );\n}\n\n// Button.propTypes = {\n//   text: PropTypes.string.isRequired,\n//   type: PropTypes.string.isRequired,\n// }\n\nexport default Button;\n","import styled from '@emotion/styled';\n\nexport const CurrentInput = styled.input`\n  display: block;\n  margin-top: 6px;\n  margin-bottom: 20px;\n`;\n\nexport const CurrentLabel = styled.label`\n  text-transform: capitalize;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport { CurrentInput, CurrentLabel } from './Input.styled';\n\nexport default function Input({\n  type,\n  name,\n  value,\n  pattern = null,\n  title = null,\n  onChange,\n}) {\n  return (\n    <CurrentLabel>\n      {name}\n      <CurrentInput\n        type={type}\n        name={name}\n        value={value}\n        pattern={pattern}\n        title={title}\n        onChange={onChange}\n      />\n    </CurrentLabel>\n  );\n}\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled/macro';\r\nimport { keyframes } from '@emotion/react';\r\nimport { CgSpinner } from 'react-icons/cg';\r\n\r\nconst spin = keyframes`\r\n0% {\r\n  transform: rotate(0deg);\r\n}\r\n100% {\r\n  transform: rotate(1turn);\r\n}\r\n`;\r\n\r\nexport const Spinner = styled(CgSpinner)`\r\n  animation: ${spin} 0.85s linear infinite;\r\n`;\r\n\r\nSpinner.defaultProps = {\r\n  size: 40,\r\n};","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { toast } from 'react-hot-toast';\nimport { CustomForm } from './Form.styled';\nimport Button from '../Button/Button';\nimport Input from '../Input/Input';\nimport { Spinner } from '../Spinner/Spinner';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { addContact } from '../../redux/actions/items'; //без Toolkit i Slice\n// import { addContact } from '../../redux/slices/itemsSlice';\nimport {useFetchContactsQuery, usePostContactMutation } from '../../redux/operations'; //c RTKQuery\n\nexport default function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const [addContact, {isLoading}] = usePostContactMutation();\n  const { data: contacts } = useFetchContactsQuery();\n\n  // const dispatch = useDispatch();\n  // const contacts = useSelector((state) => state.items);\n  \n  const handleSetInfo = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleAddContact = e => {\n    e.preventDefault();\n    const id = uuidv4();\n    \n    contacts.find(savedContact => savedContact.name === name)\n      ? alert(`${name} is already in contacts`)\n      // : dispatch(addContact({ name, number, id }));\n      : addContact({ name, number, id });\n    reset();\n    toast.success('Сontact is added to the phone book!');\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <CustomForm onSubmit={handleAddContact}>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleSetInfo}\n      />\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleSetInfo}\n      />\n      <Button type=\"submit\" disabled={isLoading}>\n        {isLoading && <Spinner size={12} />}\n        Add contact\n      </Button>\n    </CustomForm>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\n\n","import PropTypes from 'prop-types';\nimport { ContactItem} from './ContactListItem.styled';\nimport Button from '../Button/Button';\n// import { deleteContact } from '../../redux/actions/items'; //без Toolkit i Slice\nimport { useDeleteContactMutation } from '../../redux/operations';\nimport { Spinner } from '../Spinner/Spinner';\n\n\nexport default function ContactListItem({ name, number,id}) {\n  const [deleteContact, {isLoading: isDeliting}] = useDeleteContactMutation();\n  return (\n    <ContactItem>\n      {name} : {number}\n      <Button type=\"button\" text=\"delete\" onClick={() => deleteContact(id)} disabled={isDeliting} />\n      {isDeliting && <Spinner size={12}/>}\n    </ContactItem>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n}","import { useSelector,  /*useDispatch*/ } from 'react-redux';\nimport { useEffect } from 'react';\n// import { deleteContact } from '../../redux/slices/itemsSlice'; //c Slice\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport { useFetchContactsQuery } from '../../redux/operations.js';\n\nexport default function ContactList() {\n  // const contacts = useSelector((state) => state.items);\n  const filterValue = useSelector((state) => state.filter);\n  //const dispatch = useDispatch();\n   const { data: contacts } = useFetchContactsQuery();\n  \n\n  useEffect(() => {\n    localStorage.setItem('contactList', JSON.stringify(contacts));\n  }, [contacts]);\n\n  \n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterValue),\n  );\n  \n  return (\n    <ul>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          id={id}\n          // onDelete={() => dispatch(deleteContact(id))}\n          // onDelete={() => deleteContact(id)}\n          // deleting={isDeliting}\n        />\n      ))}\n    </ul>\n  );\n}\n\n","import { useDispatch} from 'react-redux';\r\nimport Input from '../Input/Input';\r\nimport { filter } from '../../redux/slices/filterSlice';\r\n\r\nexport default function Filter() {\r\n    const dispatch = useDispatch();\r\n     \r\n    const changeFilter = e => {\r\n      dispatch(filter(e.target.value.toLowerCase()));\r\n      e.target.value.reset();\r\n    };\r\n  \r\n     \r\n    return (\r\n      <Input\r\n        name=\"Find contacts by name\"\r\n        type=\"text\"\r\n        onChange={changeFilter}\r\n      />\r\n )\r\n }","// import { v4 as uuidv4 } from 'uuid';\n//import { useSelector } from 'react-redux';\nimport { Toaster } from 'react-hot-toast';\nimport {\n  Container,\n  Title,\n  SectionTitle,\n} from './components/Container/Container.styled.jsx';\nimport Form from './components/Form/Form.jsx';\nimport ContactList from './components/ContactList/ContactList.jsx';\nimport Filter from './components/Filter/Filter.jsx';\nimport { useFetchContactsQuery } from './redux/operations.js';\n\n\nexport default function App() {\n  // const contacts = useSelector((state) => state.items);\n  const { data: contacts, error, isFetching} = useFetchContactsQuery();\n   \n    return (\n    <Container>\n      <Title>Phonebook</Title>\n      <Form/>\n      {contacts.length !== 0 && <SectionTitle>Contacts</SectionTitle>}\n      {contacts.length !== 0 && <Filter/>}\n      <ContactList />\n      <Toaster position=\"top-right\" />\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}