{"version":3,"sources":["redux/slices/filterSlice.js","redux/operations.js","redux/store.js","components/Container/Container.styled.jsx","components/Form/Form.styled.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/Input/Input.styled.jsx","components/Input/Input.jsx","redux/slices/itemsSlice.js","components/Form/Form.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["filterSlice","createSlice","name","initialState","reducers","filter","state","action","payload","actions","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","fetchContacts","query","rootReducer","useFetchContactsQuery","usePostContactMutation","useDeleteContactMutation","reducer","store","configureStore","middleware","getDefaultMiddleware","devTools","process","Container","styled","div","Title","h1","SectionTitle","h2","CustomForm","form","CustomButton","button","Button","text","type","onClick","CurrentInput","input","CurrentLabel","label","Input","value","pattern","title","onChange","itemsSlice","JSON","parse","localStorage","getItem","addContact","deleteContact","contact","id","Form","useState","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","items","handleSetInfo","e","target","reset","onSubmit","preventDefault","uuidv4","find","savedContact","alert","required","ContactItem","li","ContactListItem","ContactList","filterValue","useEffect","setItem","stringify","filteredContacts","toLowerCase","includes","map","Filter","App","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAEMA,EAAYC,YAAY,CAC5BC,KAAM,SACNC,aAAc,GACdC,SAAU,CACNC,OAAQ,SAACC,EAAOC,GAAR,OAAkBA,EAAOC,YAIzBH,EAAUL,EAAYS,QAAtBJ,OACCL,IAAf,Q,eCRMU,EAAcC,YAAU,CAC1BC,YAAa,cACbC,UAAWC,YAAe,CAAEC,QAAS,0BACrCC,UAAW,SAACC,GAAD,MAAc,CACrBC,cAAeD,EAAQE,MAAM,CACzBA,MAAO,oCAQJT,ICYTU,GDNFV,EAHAW,sBAGAX,EAFAY,uBAEAZ,EADAa,yBCOa,aACblB,UACCK,EAAYE,YAAcF,EAAYc,UAU5BC,EAPDC,YAAe,CACzBF,QAASJ,EACTO,WAAY,SAACC,GAAD,4BACJA,KADI,CACoBlB,EAAYiB,cAC5CE,UAAUC,I,cCnCDC,EAAYC,IAAOC,IAAV,sLAUTC,EAAQF,IAAOG,GAAV,qKASLC,EAAeJ,IAAOK,GAAV,0L,gBCnBZC,EAAaN,IAAOO,KAAV,6CCAVC,EAAeR,IAAOS,OAAV,4Q,OCeVC,I,MAAAA,EAbf,YAA0C,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAC5B,OACE,cAACL,EAAD,CAAcI,KAAMA,EAAMC,QAASA,EAAnC,SACGF,KCLMG,EAAed,IAAOe,MAAV,2FAMZC,EAAehB,IAAOiB,MAAV,gFCLV,SAASC,EAAT,GAOX,IANFN,EAMC,EANDA,KACA1C,EAKC,EALDA,KACAiD,EAIC,EAJDA,MAIC,IAHDC,eAGC,MAHS,KAGT,MAFDC,aAEC,MAFO,KAEP,EADDC,EACC,EADDA,SAEA,OACE,eAACN,EAAD,WACG9C,EACD,cAAC4C,EAAD,CACEF,KAAMA,EACN1C,KAAMA,EACNiD,MAAOA,EACPC,QAASA,EACTC,MAAOA,EACPC,SAAUA,OClBlB,I,EAAMC,EAAWtD,YAAY,CAC3BC,KAAM,QACNC,aAAY,UAAEqD,KAAKC,MAAMC,aAAaC,QAAQ,uBAAlC,QAAqD,GACjEvD,SAAU,CACPwD,WAAa,SAACtD,EAAMC,GAAP,OAAiBA,EAAOC,SAAxB,mBAAmCF,KAChDuD,cAAe,SAACvD,EAAOC,GAAR,OAAkBD,EAAMD,QAAO,SAACyD,GAAD,OAAaA,EAAQC,KAAOxD,EAAOC,eAI/E,EAAoC+C,EAAW9C,QAAxCmD,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,cACXN,EAAf,QCHe,SAASS,IACtB,MAAwBC,mBAAS,IAAjC,mBAAO/D,EAAP,KAAagE,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KAEMC,EAAWC,cACXC,EAAWC,aAAY,SAAClE,GAAD,OAAWA,EAAMmE,SAExCC,EAAgB,SAAAC,GACpB,MAAwBA,EAAEC,OAAlB1E,EAAR,EAAQA,KAAMiD,EAAd,EAAcA,MACd,OAAQjD,GACN,IAAK,OACHgE,EAAQf,GACR,MAEF,IAAK,SACHiB,EAAUjB,GACV,MAEF,QACE,SAcA0B,EAAQ,WACZX,EAAQ,IACRE,EAAU,KAGZ,OACE,eAAC9B,EAAD,CAAYwC,SAhBW,SAAAH,GACvBA,EAAEI,iBACF,IAAMhB,EAAKiB,cAEXT,EAASU,MAAK,SAAAC,GAAY,OAAIA,EAAahF,OAASA,KAChDiF,MAAM,GAAD,OAAIjF,EAAJ,4BACLmE,EAAST,EAAW,CAAE1D,OAAMiE,SAAQJ,QACxCc,KASA,UACE,cAAC3B,EAAD,CACEN,KAAK,OACL1C,KAAK,OACLiD,MAAOjD,EACPkD,QAAQ,yHACRC,MAAM,kcACN+B,UAAQ,EACR9B,SAAUoB,IAEZ,cAACxB,EAAD,CACEN,KAAK,MACL1C,KAAK,SACLiD,MAAOgB,EACPf,QAAQ,yFACRC,MAAM,giBACN+B,UAAQ,EACR9B,SAAUoB,IAEZ,cAAC,EAAD,CAAQ9B,KAAK,SAASD,KAAK,mBCjE1B,IAAM0C,EAAcrD,IAAOsD,GAAV,uICIT,SAASC,EAAT,GAAoD,IAAzBrF,EAAwB,EAAxBA,KAAMiE,EAAkB,EAAlBA,OAAQtB,EAAU,EAAVA,QACtD,OACE,eAACwC,EAAD,WACGnF,EADH,MACYiE,EACV,cAAC,EAAD,CAAQvB,KAAK,SAASD,KAAK,SAASE,QAASA,OCLpC,SAAS2C,IACtB,IAAMjB,EAAWC,aAAY,SAAClE,GAAD,OAAWA,EAAMmE,SACxCgB,EAAcjB,aAAY,SAAClE,GAAD,OAAWA,EAAMD,UAE3CgE,EAAWC,cAEjBoB,qBAAU,WACRhC,aAAaiC,QAAQ,cAAenC,KAAKoC,UAAUrB,MAClD,CAACA,IAGJ,IAAMsB,EAAmBtB,EAASlE,QAAO,SAAAyD,GAAO,OAC9CA,EAAQ5D,KAAK4F,cAAcC,SAASN,MAGtC,OACE,6BACGI,EAAiBG,KAAI,gBAAGjC,EAAH,EAAGA,GAAI7D,EAAP,EAAOA,KAAMiE,EAAb,EAAaA,OAAb,OACpB,cAACoB,EAAD,CAEErF,KAAMA,EACNiE,OAAQA,EACRtB,QAAS,kBAAIwB,EAASR,EAAcE,MAH/BA,QCpBA,SAASkC,IACpB,IAAM5B,EAAWC,cAOjB,OACE,cAACpB,EAAD,CACEhD,KAAK,wBACL0C,KAAK,OACLU,SATiB,SAAAqB,GACnBN,EAAShE,EAAOsE,EAAEC,OAAOzB,MAAM2C,mBCKtB,SAASI,IACtB,IAAM3B,EAAWC,aAAY,SAAClE,GAAD,OAAWA,EAAMmE,SAI5C,OACA,eAAC1C,EAAD,WACE,cAACG,EAAD,wBACA,cAAC8B,EAAD,IACqB,IAApBO,EAAS4B,QAAgB,cAAC/D,EAAD,uBACL,IAApBmC,EAAS4B,QAAgB,cAACF,EAAD,IAC1B,cAACT,EAAD,OCjBNY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU7E,MAAOA,EAAjB,SACE,cAACyE,EAAD,QAIJK,SAASC,eAAe,W","file":"static/js/main.431f05af.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst filterSlice=createSlice({\r\n  name: 'filter',\r\n  initialState: '',\r\n  reducers: {\r\n      filter: (state, action)=> action.payload,\r\n  },\r\n});\r\n\r\nexport const {filter} = filterSlice.actions;\r\nexport default filterSlice.reducer;","// import { createApi } from '@reduxjs/toolkit/query';\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nconst contactsApi = createApi({\r\n    reducerPath: 'contactsApi',\r\n    baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:3003' }),\r\n    endpoints: (builder) => ({\r\n        fetchContacts: builder.query({\r\n            query: () => `/contacts`,\r\n        }),\r\n        // postContact: ,\r\n        // deleteContact: ,\r\n    \r\n    }),\r\n});\r\n\r\nexport default contactsApi;\r\n \r\nexport const {\r\n    useFetchContactsQuery,\r\n    usePostContactMutation,\r\n    useDeleteContactMutation,\r\n} = contactsApi;\r\n\r\n","//Без Redux-toolkit\r\n// import { createStore} from 'redux';\r\n// import { rootReduser } from './reducers/index'\r\n// import { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\n// const store = createStore(rootReduser, devToolsEnhancer());\r\n\r\n// export default store;\r\n\r\n\r\n// c Redux-toolkit\r\n// import {configureStore } from '@reduxjs/toolkit';\r\n// import { rootReduser } from './reducers/index';\r\n\r\n// const store = configureStore({\r\n//     reducer: rootReducer,\r\n//     devTools: process.env.NODE_ENV!== 'prodaction',\r\n// });\r\n\r\n// export default store;\r\n\r\n\r\n// c Redux-toolkit i Slice\r\nimport {configureStore } from '@reduxjs/toolkit';\r\n// import items from './slices/itemsSlice';\r\nimport filter from './slices/filterSlice';\r\nimport contactsApi from './operations';\r\n\r\nconst rootReducer = {\r\n    filter,\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        [...getDefaultMiddleware(), contactsApi.middleware],\r\n    devTools: process.env.NODE_ENV!== 'prodaction',\r\n});\r\n\r\nexport default store;\r\n\r\n\r\n \r\n\r\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 400px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n  padding: 30px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 30px;\n`;\n\nexport const Title = styled.h1`\n  display: block;\n  font-size: 26px;\n  font-weight: 800;\n  text-align: center;\n  text-transform: uppercase;\n  margin-bottom: 10px;\n`;\n\nexport const SectionTitle = styled.h2`\n  display: block;\n  font-size: 20px;\n  font-weight: 800;\n  text-align: center;\n  text-transform: uppercase;\n  margin-top: 30px;\n  margin-bottom: 10px;\n`;\n","import styled from '@emotion/styled';\n\nexport const CustomForm = styled.form`\n  padding: 0px;\n`;\n","import styled from '@emotion/styled';\n\nexport const CustomButton = styled.button`\n  background-color: #ff6b0a;\n  border: none;\n  border-radius: 5px;\n  outline: none;\n  padding: 3px 12px;\n  color: #fff;\n  font-weight: bold;\n  font-size: 12px;\n  line-height: 16px;\n  text-transform: uppercase;\n  cursor: pointer;\n`;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { CustomButton } from './Button.styled';\n\nfunction Button({ text, type, onClick }) {\n  return (\n    <CustomButton type={type} onClick={onClick}>\n      {text}\n    </CustomButton>\n  );\n}\n\n// Button.propTypes = {\n//   text: PropTypes.string.isRequired,\n//   type: PropTypes.string.isRequired,\n// }\n\nexport default Button;\n","import styled from '@emotion/styled';\n\nexport const CurrentInput = styled.input`\n  display: block;\n  margin-top: 6px;\n  margin-bottom: 20px;\n`;\n\nexport const CurrentLabel = styled.label`\n  text-transform: capitalize;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport { CurrentInput, CurrentLabel } from './Input.styled';\n\nexport default function Input({\n  type,\n  name,\n  value,\n  pattern = null,\n  title = null,\n  onChange,\n}) {\n  return (\n    <CurrentLabel>\n      {name}\n      <CurrentInput\n        type={type}\n        name={name}\n        value={value}\n        pattern={pattern}\n        title={title}\n        onChange={onChange}\n      />\n    </CurrentLabel>\n  );\n}\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst itemsSlice=createSlice({\r\n  name: 'items',\r\n  initialState: JSON.parse(localStorage.getItem('contactList')) ?? [],\r\n  reducers: {\r\n     addContact:  (state,action)=>[action.payload,...state],\r\n     deleteContact: (state, action)=> state.filter((contact) => contact.id !== action.payload),\r\n  }\r\n});\r\n\r\nexport const {addContact, deleteContact} = itemsSlice.actions;\r\nexport default itemsSlice.reducer;","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { CustomForm } from './Form.styled';\nimport Button from '../Button/Button';\nimport Input from '../Input/Input';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { addContact } from '../../redux/actions/items'; //без Toolkit i Slice\nimport {addContact} from '../../redux/slices/itemsSlice';\n\nexport default function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector((state) => state.items);\n  \n  const handleSetInfo = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleAddContact = e => {\n    e.preventDefault();\n    const id = uuidv4();\n    \n    contacts.find(savedContact => savedContact.name === name)\n      ? alert(`${name} is already in contacts`)\n      : dispatch(addContact({ name, number, id }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <CustomForm onSubmit={handleAddContact}>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleSetInfo}\n      />\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleSetInfo}\n      />\n      <Button type=\"submit\" text=\"Add contact\" />\n    </CustomForm>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\n\n","import PropTypes from 'prop-types';\nimport { ContactItem} from './ContactListItem.styled';\nimport Button from '../Button/Button';\n// import { deleteContact } from '../../redux/actions/items'; //без Toolkit i Slice\n\n\nexport default function ContactListItem({ name, number, onClick}) {\n  return (\n    <ContactItem>\n      {name} : {number}\n      <Button type=\"button\" text=\"delete\" onClick={onClick} />\n    </ContactItem>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n}","import { useSelector,  useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { deleteContact } from '../../redux/slices/itemsSlice'; //c Slice\nimport ContactListItem from '../ContactListItem/ContactListItem';\n\nexport default function ContactList() {\n  const contacts = useSelector((state) => state.items);\n  const filterValue = useSelector((state) => state.filter);\n  // console.log(`filter`, filterValue)\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    localStorage.setItem('contactList', JSON.stringify(contacts));\n  }, [contacts]);\n\n  \n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterValue),\n  );\n  \n  return (\n    <ul>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          onClick={()=>dispatch(deleteContact(id))}\n        />\n      ))}\n    </ul>\n  );\n}\n\n","import { useDispatch} from 'react-redux';\r\nimport Input from '../Input/Input';\r\nimport { filter } from '../../redux/slices/filterSlice';\r\n\r\nexport default function Filter() {\r\n    const dispatch = useDispatch();\r\n     \r\n    const changeFilter = e => {\r\n      dispatch(filter(e.target.value.toLowerCase()));\r\n    };\r\n  \r\n     \r\n    return (\r\n      <Input\r\n        name=\"Find contacts by name\"\r\n        type=\"text\"\r\n        onChange={changeFilter}\r\n      />\r\n )\r\n }","// import { v4 as uuidv4 } from 'uuid';\nimport { useSelector } from 'react-redux';\nimport {\n  Container,\n  Title,\n  SectionTitle,\n} from './components/Container/Container.styled.jsx';\nimport Form from './components/Form/Form.jsx';\nimport ContactList from './components/ContactList/ContactList.jsx';\nimport Filter from './components/Filter/Filter.jsx';\n// import { useFetchContactsQuery } from './redux/operations.js';\n\n\nexport default function App() {\n  const contacts = useSelector((state) => state.items);\n  // const { data, error, isLoading } = useFetchContactsQuery();//isFetching\n  // console.log(`data`, data)\n \n    return (\n    <Container>\n      <Title>Phonebook</Title>\n      <Form/>\n      {contacts.length !== 0 && <SectionTitle>Contacts</SectionTitle>}\n      {contacts.length !== 0 && <Filter/>}\n      <ContactList/>\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}